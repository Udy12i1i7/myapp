# Use the latest 2.1 version of CircleCI pipeline process engine
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  docker: circleci/docker@2.1.4

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    description:   Build and tag a Docker image
    parameters:
      attach-at:
        default: ''
        description: >
          Provide a path if you wish to attach a workspace. Use `./` for the working
          directory. `attach_workspace` attached location - where to mount
          folder/files that were `persist_to_workspace` in a previous step.
          https://circleci.com/docs/2.0/configuration-reference/#attach_workspace
        type: string
      cache_from:
        default: ''
        description: >
          Comma-separated list of images, images will first be pulled, then passed
          as the --cache-from build argument
          https://docs.docker.com/engine/reference/commandline/build/
        type: string
      debug:
        default: false
        description: |
          Extra output for orb developers
        type: boolean
      docker-context:
        default: .
        description: >
          Path to the directory containing your build context, defaults to .
          (working directory)
        type: string
      dockerfile:
        default: Dockerfile
        description: 'Name of dockerfile to use, defaults to Dockerfile'
        type: string
      extra_build_args:
        default: ''
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
      image:
        description: Name of image to build
        type: string
      lint-dockerfile:
        default: false
        description: |
          Lint Dockerfile before building?
        type: boolean
      no_output_timeout:
        default: 10m
        description: >
          Pass through a default timeout if your Docker build does not output
          anything for more than 10 minutes.
        type: string
      path:
        default: .
        description: >
          Path to the directory containing your Dockerfile, defaults to . (working
          directory)
        type: string
      registry:
        default: docker.io
        description: |
          Name of registry to use, defaults to docker.io
        type: string
      step-name:
        default: Docker build
        description: 'Specify a custom step name for this command, if desired'
        type: string
      tag:
        default: $CIRCLE_SHA1
        description: 'Image tag, defaults to the value of $CIRCLE_SHA1'
        type: string
      treat-warnings-as-errors:
        default: false
        description: >
          If linting Dockerfile, treat linting warnings as errors? (would trigger an
          exit code and fail the CircleCI job)
        type: boolean
      use-buildkit:
        default: false
        description: >
          Use buildkit to build the image. Available on Docker >= 18.09.0
          https://docs.docker.com/develop/develop-images/build_enhancements/
        type: boolean
    steps:
      - when:
          condition: <<parameters.lint-dockerfile>>
          steps:
            - dockerlint:
                debug: <<parameters.debug>>
                dockerfile: <<parameters.path>>/<<parameters.dockerfile>>
                treat-warnings-as-errors: <<parameters.treat-warnings-as-errors>>
      - when:
          condition: <<parameters.use-buildkit>>
          steps:
            - run: echo 'export DOCKER_BUILDKIT=1' >> $BASH_ENV
      - when:
          condition: <<parameters.extra_build_args>>
          steps:
            - run: >-
                echo 'PARAM_EXTRA_BUILD_ARGS="<<parameters.extra_build_args>>"' >>
                $BASH_ENV
      - when:
          condition: <<parameters.attach-at>>
          steps:
            - attach_workspace:
                at: <<parameters.attach-at>>
      - run:
          command: |
            #!/usr/bin/env bash

            DOCKER_TAGS_ARG=""

            parse_tags_to_docker_arg() {
              # Set comma as the new delimiter for the scope of this function.
              local IFS=","

              # Split tags into an array based on IFS delimiter.
              read -ra tags \<<< "$PARAM_TAG"

              local docker_arg

              for tag in "${tags[@]}"; do
                if [ -z "$docker_arg" ]; then
                  docker_arg="--tag=\"$PARAM_REGISTRY/$PARAM_IMAGE:$tag\""
                else
                  docker_arg="$docker_arg --tag=\"$PARAM_REGISTRY/$PARAM_IMAGE:$tag\""
                fi
              done

              DOCKER_TAGS_ARG="$(eval echo $docker_arg)"
            }

            pull_images_from_cache() {
              local cache
              cache="$(eval echo $PARAM_CACHE_FROM)"

              echo "$cache" | sed -n 1'p' | tr ',' '\n' | while read -r image; do
                echo "Pulling ${image}";
                docker pull ${image} || true
              done
            }

            if ! parse_tags_to_docker_arg; then
              echo "Unable to parse provided tags."
              echo "Check your \"tag\" parameter or refer to the docs and try again: https://circleci.com/developer/orbs/orb/circleci/docker."
              exit 1
            fi

            if [ -n "$PARAM_CACHE_FROM" ]; then
              if ! pull_images_from_cache; then
                echo "Unable to pull images from the cache."
                echo "Check your \"cache_from\" parameter or refer to the docs and try again: https://circleci.com/developer/orbs/orb/circleci/docker."
                exit 1
              fi
            fi

            build_args=(
              "--file=$PARAM_DOCKERFILE_PATH/$PARAM_DOCKERFILE_NAME"
              "$DOCKER_TAGS_ARG"
            )

            if [ -n "$PARAM_EXTRA_BUILD_ARGS" ]; then
              extra_build_args="$(eval echo "$PARAM_EXTRA_BUILD_ARGS")"
              build_args+=("$extra_build_args")
            fi

            if [ -n "$PARAM_CACHE_FROM" ]; then
              build_args+=("--cache-from=$PARAM_CACHE_FROM")
            fi

            if [ "$PARAM_USE_BUILDKIT" -eq 1 ]; then
              build_args+=("--progress=plain")
            fi

            # The context must be the last argument.
            build_args+=("$PARAM_DOCKER_CONTEXT")

            old_ifs="$IFS"
            IFS=' '

            set -x
            # shellcheck disable=SC2048 # We want word splitting here.
            docker build ${build_args[*]}
            set +x

            IFS="$old_ifs"
          environment:
            PARAM_CACHE_FROM: <<parameters.cache_from>>
            PARAM_DOCKER_CONTEXT: <<parameters.docker-context>>
            PARAM_DOCKERFILE_NAME: <<parameters.dockerfile>>
            PARAM_DOCKERFILE_PATH: <<parameters.path>>
            PARAM_IMAGE: <<parameters.image>>
            PARAM_REGISTRY: <<parameters.registry>>
            PARAM_TAG: <<parameters.tag>>
            PARAM_USE_BUILDKIT: <<parameters.use-buildkit>>
          name: <<parameters.step-name>>
          no_output_timeout: << parameters.no_output_timeout >>
  runner-test:
    machine: true
    resource_class: udy12i1i7/project-demo
    steps:
      - run: echo "Hi I'm on Runners!"
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build-and-push:
    environment:
      DOCKER_IMAGE: myapp
      DOCKER_TAG: latest
      REGISTRY: "http://103.5.209.44:5000"
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - build:
          image: $DOCKER_IMAGE
          tag: $DOCKER_TAG
          registry: $REGISTRY
      - docker/push:
          image: $DOCKER_IMAGE
          tag: $DOCKER_TAG
          registry: $REGISTRY
          digest-path: /tmp/digest.txt
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  main:
    jobs:
      - say-hello
      - runner-test
      - build-and-push
